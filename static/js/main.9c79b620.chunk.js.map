{"version":3,"sources":["Feadback/Statistic/Statistic.jsx","Feadback/FeedbackOptions/FeedbackOptions.jsx","Feadback/Section/Section.jsx","Feadback/Notifaction/Notifaction.jsx","Feadback/Feadback.jsx","App/App.jsx","index.js"],"names":["Statistic","goodValue","badValue","neutralValue","counterFeedback","cpountPosFeedback","FeedbackOptions","options","onLeaveFeedback","type","onClick","Section","title","children","Notifaction","Feadback","goodBase","neutralBase","badBase","console","log","useState","good","setGood","neutral","setNeutral","bad","setBad","countTotalFeedback","renderStatistics","Math","floor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAkBeA,EAlBG,SAAC,GAMZ,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,kBAEA,OACE,qCACE,yCAAYJ,KACZ,4CAAeE,KACf,wCAAWD,KACX,0CAAaE,KACb,sDAAyBC,EAAzB,WCHSC,EAVS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,wBAAQC,KAAK,SAASC,QAASH,EAA/B,SACGC,OCKMG,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCJQ,SAASC,IACtB,OAAO,sDCMT,IAmDeC,EAnDE,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACzCC,QAAQC,IAAIJ,GACZ,MAAwBK,mBAASL,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAASJ,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAASH,GAA/B,mBAAOQ,EAAP,KAAYC,EAAZ,KAcMC,EAAqB,kBAAMN,EAAOI,EAAMF,GAMxCK,EACJ,cAAC,EAAD,CACE5B,UAAWqB,EACXpB,SAAUwB,EACVvB,aAAcqB,EACdpB,gBAAiBwB,IACjBvB,kBATKyB,KAAKC,MAAO,IAAMH,IAAwBN,KAanD,OACE,qCACE,eAAC,EAAD,CAASV,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBL,QA/BE,WACvBgB,EAAQD,EAAO,IA8BiCd,gBAAiB,SAC7D,cAAC,EAAD,CACED,QAzBgB,WACtBkB,EAAWD,EAAU,IAyBfhB,gBAAiB,YAEnB,cAAC,EAAD,CAAiBD,QAhCE,WACvBoB,EAAOD,EAAM,IA+BmClB,gBAAiB,WAE/D,cAAC,EAAD,CAASI,MAAM,YAAf,SACGU,GAAQ,EAAIO,EAAmB,cAACf,EAAD,UC1CzBkB,EARH,WACV,OACE,8BACE,cAAC,EAAD,CAAUhB,SAAU,EAAGC,YAAa,EAAGC,QAAS,OCDtDe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9c79b620.chunk.js","sourcesContent":["const Statistic = ({\r\n  goodValue,\r\n  badValue,\r\n  neutralValue,\r\n  counterFeedback,\r\n  cpountPosFeedback,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>Good: {goodValue}</div>\r\n      <div>Neutral: {neutralValue}</div>\r\n      <div>Bad: {badValue}</div>\r\n      <div>Total: {counterFeedback}</div>\r\n      <div>Positive feedback: {cpountPosFeedback}%</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={options}>\r\n        {onLeaveFeedback}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","const Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","export default function Notifaction() {\r\n  return <h2>There is no feedback</h2>;\r\n}\r\n","import { useState } from \"react\";\r\n\r\nimport Statistic from \"./Statistic/Statistic\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Section/Section\";\r\nimport Notifaction from \"./Notifaction/Notifaction\";\r\n\r\nconst Feadback = ({ goodBase, neutralBase, badBase }) => {\r\n  console.log(goodBase);\r\n  const [good, setGood] = useState(goodBase);\r\n  const [neutral, setNeutral] = useState(neutralBase);\r\n  const [bad, setBad] = useState(badBase);\r\n\r\n  const increaseFeedback = () => {\r\n    setGood(good + 1);\r\n  };\r\n\r\n  const degreaseFeedback = () => {\r\n    setBad(bad + 1);\r\n  };\r\n\r\n  const neutralFeedback = () => {\r\n    setNeutral(neutral + 1);\r\n  };\r\n\r\n  const countTotalFeedback = () => good + bad + neutral;\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.floor((100 / countTotalFeedback()) * good);\r\n  };\r\n\r\n  const renderStatistics = (\r\n    <Statistic\r\n      goodValue={good}\r\n      badValue={bad}\r\n      neutralValue={neutral}\r\n      counterFeedback={countTotalFeedback()}\r\n      cpountPosFeedback={countPositiveFeedbackPercentage()}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Section title=\"Please leave feadback\">\r\n        <FeedbackOptions options={increaseFeedback} onLeaveFeedback={\"Good\"} />\r\n        <FeedbackOptions\r\n          options={neutralFeedback}\r\n          onLeaveFeedback={\"Neutral\"}\r\n        />\r\n        <FeedbackOptions options={degreaseFeedback} onLeaveFeedback={\"Bad\"} />\r\n      </Section>\r\n      <Section title=\"Statistic\">\r\n        {good >= 1 ? renderStatistics : <Notifaction />}\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Feadback;\r\n","import Feedback from \"../Feadback/Feadback\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Feedback goodBase={0} neutralBase={0} badBase={0} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App/App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}